Efficient and robust approximate nearest neighbor search using Hierarchical Navigable Small World graphs

1) Introduction
- KNNS: information search
	- distance function
	- K elements that minimize distance
- "curse of dimensionality"
-> K-ANNS: allows small errors
	- recall = #true neighbors / K
- most popular solutions:
	- tree algorithms
	- local-sensitive hashing
	- product quantization
- Hierarchical Navigable Small World
	- graph based on incremental K-ANNS structure
	- logarithmic complexity scaling
	-> explicit selection of graph's entry-point node
	-> separation of links by different scales
	-> advance dheuristic to select neighbors
Proximity graph techniques
- greeding routing in k-NN graphs
- given graph, start at enter point and iteratively traverse the graph
- examine distances from query to neighbors of base node
- select next base node the closest one
- keep track of best discovered neighbors
- terminated at stopping condition
Drawbacks:
- power law scaling of number of steps with dataset size during routing process
- poor search on clustered data
-> navigable graphs: logarithmic scaling of hops
	- built via consecutive insertion of elements in random order
	- bidirectionally connecting them to M closest neighbors inserted earlier -> connectivity
	- construction can be efficiently parallelized


